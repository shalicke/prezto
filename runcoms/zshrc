#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Add MacPorts GNU paths, Cask, coreutils, and gopath.

# go stuff

#export GOPATH="$HOME/hacking/go"
#export GOROOT="$HOME/hg/go"

export PATH=$HOME/.rbenv/bin:$PATH
typeset -U PATH

 # Source aliases.
source $HOME/.zsh_aliases

# rbenv
eval "$(rbenv init -)"

# fasd
eval "$(fasd --init auto)"

# python virtualenv
source /opt/local/Library/Frameworks/Python.framework/Versions/3.3/bin/virtualenvwrapper.sh
export WORKON_HOME="$HOME/.python-virtualenvs"
export VIRTUAL_ENV_DISABLE_PROMPT=1

# OPAM configuration
. $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# zmv -- because it's amazing.
autoload 'zmv'

########################################
## BEGIN PROMPT STUFF

setopt prompt_subst

autoload -Uz vcs_info
autoload -Uz colors && colors
autoload -Uz promptinit


atom='%(?,%F{02}ok%f,%F{10}returned %F{01}%?%f)'

precmd() { vcs_info }




zstyle ':vcs_info:*' enable git hg
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' get-revision true
zstyle ':vcs_info:*' actionformats '%b|%a%u%c%m'
zstyle ':vcs_info:*' formats '%F{10}on %F{3}%b%f %m%u%c'
zstyle ':vcs_info:*' branchformat '[%b%u%c]'
zstyle ':vcs_info:*' stagedstr '%F{yellow}●%f'
zstyle ':vcs_info:*' unstagedstr '%F{red}●%f'

zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-aheadbehind git-remotebranch

### git: Show marker (T) if there are untracked files in repository
# Make sure you have added staged to your 'formats':  %c
function +vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | fgrep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[unstaged]+='%B%F{magenta}●%f%b'
    fi
}

### git: Show +N/-N when your local branch is ahead-of or behind remote HEAD.
# Make sure you have added misc to your 'formats':  %m
function +vi-git-aheadbehind() {
    local ahead behind
    local -a gitstatus

    # for git prior to 1.7
    # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
    (( $ahead )) && gitstatus+=( "%B%F{blue}▲ ${ahead}%f%b" )

    # for git prior to 1.7
    # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
    (( $behind )) && gitstatus+=( "%B%F{red}▼ ${behind}%f%b" )

    hook_com[misc]+=${(j::)gitstatus}
}

### git: Show remote branch name for remote-tracking branches
# Make sure you have added staged to your 'formats':  %b
function +vi-git-remotebranch() {
    local remote

    # Are we on a remote-tracking branch?
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

    # The first test will show a tracking branch whenever there is one. The
    # second test, however, will only show the remote branch's name if it
    # differs from the local one.

    if [[ -n ${remote} && ${remote#*/} != ${hook_com[branch]} ]] ; then
        hook_com[branch]="${hook_com[branch]}(%F{cyan}${remote}%f)"
    fi
}

function prompt_flags(){
    echo -n "$atom: "
}

function prompt_vcs() {
    echo -n ${vcs_info_msg_0_}
}

function prompt_dir(){
    echo -n '%F{10}in %F{01}%2~%f '
}

function prompt_context() {
    local user=`whoami`

    if [[ "$user" != "$DEFAULT_USER" || -n "$SSH_USER" ]]; then
        echo -n '%F{10}as %F{05}%n%f '
    fi
}

function build_prompt() {
    prompt_flags
    prompt_context
    prompt_dir
    prompt_vcs
}

## RPrompt functions

function prompt_ruby() {
    local current_ruby
    current_ruby="$(rbenv version-name)"
    if [[ -n $USE_RUBY ]]; then
        echo -n "%F{10} using ruby %F{01}$current_ruby%f"
    fi
}

function prompt_python() {
    local venv
    if [[ -n $VIRTUAL_ENV ]]; then
        venv=`basename $VIRTUAL_ENV`
        echo -n "%F{10} in venv %F{12}$venv"
    fi
}

function prompt_lein() {

    local found lein_info
    while [ $PWD != $HOME ]; do
        if [[ -e ./project.clj ]]; then
            export LEIN_ROOT=$PWD
            if [[ -n $LEIN_ROOT || $LEIN_ROOT != $PWD ]]; then
                lein_info=`head -n1 ./project.clj | sed -e 's/"//g' | awk '{print $2":"$3}'`
                echo -n "$lein_info"
                break
            fi
        else
            cd ..;
        fi
    done;
}

function prompt_go() {
    if [[ $GOPATH == $PWD ]]; then
       echo -n "$(go version)"
    fi
}

# add-zsh-hook precmd prompt_lein

function build_rprompt() {
    prompt_ruby
    prompt_python
    prompt_go
    prompt_lein
}


function setup_prompt () {
    PROMPT='$(build_prompt)
%# '
    RPROMPT='$(build_rprompt)'
}

setup_prompt "$@"

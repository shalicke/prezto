#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Add MacPorts GNU paths, Cask, coreutils, and gopath.

export PATH=$HOME/.rbenv/bin:$PATH
typeset -U PATH

 # Source aliases.
source $HOME/.zsh_aliases

# rbenv
eval "$(rbenv init -)"

# fasd
eval "$(fasd --init auto)"

# python virtualenv
source /opt/local/Library/Frameworks/Python.framework/Versions/3.3/bin/virtualenvwrapper.sh
export WORKON_HOME="$HOME/.python-virtualenvs"
export VIRTUAL_ENV_DISABLE_PROMPT=1

# OPAM configuration
. $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# zmv -- because it's amazing.
autoload 'zmv'

########################################
## BEGIN PROMPT STUFF

setopt prompt_subst

autoload -Uz vcs_info
autoload -Uz colors && colors
autoload -Uz promptinit

precmd() { vcs_info }

zstyle ':vcs_info:*' enable git hg
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' get-revision true
zstyle ':vcs_info:*' actionformats '%b|%a%u%c%m%f '
zstyle ':vcs_info:*' formats '%F{10}on %F{3}%b%f%m%u%c%f '
zstyle ':vcs_info:*' branchformat '[%b%u%c]%f '
zstyle ':vcs_info:*' stagedstr '%F{yellow}●%f'
zstyle ':vcs_info:*' unstagedstr '%F{red}●%f'

zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-aheadbehind git-remotebranch

### git: Show marker (T) if there are untracked files in repository
# Make sure you have added staged to your 'formats':  %c
function +vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | fgrep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[unstaged]+='%B%F{magenta}●%f%b'
    fi
}

### git: Show +N/-N when your local branch is ahead-of or behind remote HEAD.
# Make sure you have added misc to your 'formats':  %m
function +vi-git-aheadbehind() {
    local ahead behind
    local -a gitstatus

    # for git prior to 1.7
    # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
    (( $ahead )) && gitstatus+=( "%F{blue}▲ ${ahead}%f" )

    # for git prior to 1.7
    # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
    (( $behind )) && gitstatus+=( "%F{red}▼ ${behind}%f" )

    hook_com[misc]+=${(j::)gitstatus}
}

### git: Show remote branch name for remote-tracking branches
# Make sure you have added staged to your 'formats':  %b
function +vi-git-remotebranch() {
    local remote

    # Are we on a remote-tracking branch?
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

    # The first test will show a tracking branch whenever there is one. The
    # second test, however, will only show the remote branch's name if it
    # differs from the local one.

    if [[ -n ${remote} && ${remote#*/} != ${hook_com[branch]} ]] ; then
        hook_com[branch]="${hook_com[branch]}(%F{cyan}${remote}%f)"
    fi
}



function prompt_flags(){
    local atom
    atom='%(?,%F{02}ok%f,%F{10}err %F{01}%?%f)'
    echo -n "$atom. "
}

function prompt_vcs() {
    echo -n ${vcs_info_msg_0_}
}

function prompt_dir(){
    echo -n '%F{10}in %F{01}%2~%f '
}

function prompt_context() {
    local user=`whoami`

    if [[ "$user" != "$DEFAULT_USER" || -n "$SSH_USER" ]]; then
        echo -n '%F{10}as %F{05}%n%f '
    fi
}

function prompt_ruby() {
    local current_ruby
    if [[ -n $USE_RUBY ]]; then
        current_ruby="$(rbenv version-name)"
        if [[ -n $VIRTUAL_ENV ]]; then
            echo -n "%F{10}and ruby %F{01}$current_ruby%f "
        else
            echo -n "%F{10}using ruby %F{01}$current_ruby%f "
        fi
    fi
}

function prompt_python() {
    local venv python_version
    if [[ -n $VIRTUAL_ENV ]]; then
        venv=${VIRTUAL_ENV:t}
        python_version=`python --version 2>&1|cut -f2 -d' '`
        echo -n "%F{10}using python %F{12}${python_version}%F{10}/%F{12}$venv%f "
    fi
}

# because who wants to shell out

function display_lein() {
    local lein_file=$1
    local tmp

    read tmp < $lein_file
    lein_info=("${(Qs: :)tmp}")
    project_info="$lein_info[2]/$lein_info[3]"

    echo -n "%F{10}with lein %F{cyan}$project_info%f "
}

function prompt_lein() {

    local project lein_file project_info
    lein_file="project.clj"
    if [[ -n $USE_LEIN ]]; then
        while [ $PWD != / ]; do
            if [[ -e $lein_file ]]; then
                display_lein $lein_file
                break
            else
                cd ..
            fi
        done
    fi
}

# TODO: see if there is a better way of doing this

function ancestor() {
    local parent=$1
    local start=$PWD

    while true; do
        if [[ $PWD == $parent ]]; then
            cd $start
            return 0
        elif [[ $PWD == / ]]; then
            cd $start
            return 127
        else
            cd ..
        fi
    done
}


function prompt_go() {
    local go_ver
    if [[ $GOPATH == $PWD && -n $USE_GO ]]; then
        go_ver=("${(s: :)$(go version)}")
        go_ver="${go_ver[3]/go/}"
        echo -n "%F{10}using go %F{blue}$go_ver%f"
    fi
}

function build_prompt() {
    prompt_flags
    prompt_context
    prompt_dir
    prompt_vcs
    prompt_python
    prompt_ruby
    prompt_lein
    prompt_go
}

function build_rprompt() {}

function setup_prompt () {
    PROMPT='$(build_prompt)
%# '
    RPROMPT='$(build_rprompt)'
}

setup_prompt "$@"
